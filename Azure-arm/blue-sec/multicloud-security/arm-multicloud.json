{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "azureAppName": {
        "type": "string"
      },
      "azureResourceGroup": {
        "type": "string"
      },
      "azureCredentials": {
        "type": "secureObject"
      },
      "awsAccessKeyId": {
        "type": "secureString"
      },
      "awsSecretAccessKey": {
        "type": "secureString"
      },
      "awsRegion": {
        "type": "string"
      },
      "gcpCredentials": {
        "type": "secureObject"
      },
      "gcpProjectId": {
        "type": "string"
      },
      "snykToken": {
        "type": "secureString"
      },
      "githubToken": {
        "type": "secureString"
      },
      "codecovToken": {
        "type": "secureString"
      },
      "azureStorageAccountName": {
        "type": "string"
      },
      "azureSqlServerName": {
        "type": "string"
      },
      "azureKeyVaultName": {
        "type": "string"
      },
      "awsApp Name": {
        "type": "string"
      },
      "gcpApp Name": {
        "type": "string"
      }
    },
    "variables": {
      "ubuntuLatest": "ubuntu-latest"
    },
    "resources": [
      {
        "type": "Microsoft.Azure.Actions/CI",
        "name": "CI-Blue [Multicloud Sec]",
        "apiVersion": "2022-02-01",
        "location": "[resourceGroup().location]",
        "properties": {
          "trigger": {
            "type": "push",
            "branches": [
              "master"
            ]
          },
          "jobs": [
            {
              "name": "ci",
              "runsOn": "[variables('ubuntuLatest')]",
              "steps": [
                {
                  "task": "actions/checkout@v4",
                  "displayName": "Checkout code"
                },
                {
                  "task": "run",
                  "displayName": "Install dependencies",
                  "script": "npm install"
                },
                {
                  "task": "run",
                  "displayName": "Run tests",
                  "script": "npm test"
                },
                {
                  "task": "run",
                  "displayName": "Security audit",
                  "script": "npm audit --audit-level=critical"
                },
                {
                  "task": "snyk/actions@master",
                  "displayName": "Snyk security scan",
                  "inputs": {
                    "snykToken": "[parameters('snykToken')]"
                  }
                },
                {
                  "task": "actions/checkout@v4",
                  "displayName": "Checkout code"
                },
                {
                  "task": "run",
                  "displayName": "Create CodeQL config file",
                  "script": "mkdir -p .github/codeql && echo \"language: javascript\" >> $GITHUB_WORKSPACE/.github/codeql/codeql-config.yml"
                },
                {
                  "task": "github/codeql-action/init@v2",
                  "displayName": "Initialize CodeQL",
                  "inputs": {
                    "githubToken": "[parameters('githubToken')]",
                    "configFile": "./.github/codeql/codeql-config.yml"
                  }
                },
                {
                  "task": "codecov/codecov-action@v1",
                  "displayName": "Codecov analysis",
                  "inputs": {
                    "codecovToken": "[parameters('codecovToken')]"
                  }
                },
                {
                  "task": "actions/upload-artifact@v2",
                  "displayName": "Upload test report",
                  "inputs": {
                    "name": "test-report",
                    "path": "target/surefire-reports"
                  }
                },
                {
                  "task": "actions/upload-artifact@v2",
                  "displayName": "Upload code coverage report",
                  "inputs": {
                    "name": "code-coverage-report",
                    "path": "target/site/jacoco"
                  }
                },
                {
                  "task": "azure/login@v1",
                  "displayName": "Login to Azure",
                  "inputs": {
                    "creds": "[parameters('azureCredentials')]"
                  }
                },
                {
                  "task": "azure/microsoft-security-devops@v1",
                  "displayName": "Scan for misconfigurations in Infrastructure as Code",
                  "inputs": {
                    "categories": "IaC"
                  }
                },
                {
                    "task": "azure/CLI@v1",
                    "displayName": "Prevent Azure Storage Account Public Access",
                    "inputs": {
                      "inlineScript": "az storage account update --name ${azureStorageAccountName} --resource-group ${azureResourceGroup} --public-network-access Disabled"
                    }
                  },
                  {
                    "task": "azure/CLI@v1",
                    "displayName": "Enable Azure Storage Account Firewall",
                    "inputs": {
                      "inlineScript": "az storage account update --name ${azureStorageAccountName} --resource-group ${azureResourceGroup} --default-action Deny"
                    }
                  },
                  {
                    "task": "azure/CLI@v1",
                    "displayName": "Enable Azure SQL Database Firewall",
                    "inputs": {
                      "inlineScript": "az sql server firewall-rule create --resource-group ${azureResourceGroup} --server ${azureSqlServerName} --name AllowAzureServices --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0"
                    }
                  },
                  {
                    "task": "azure/CLI@v1",
                    "displayName": "Enable Azure Key Vault Firewall",
                    "inputs": {
                      "inlineScript": "az keyvault update --name ${azureKeyVaultName} --resource-group ${azureResourceGroup} --default-action Deny"
                    }
                  },
                  {
                    "task": "azure/webapps-deploy@v2",
                    "displayName": "Deploy to Azure",
                    "inputs": {
                      "app-name": "[parameters('azureAppName')]",
                      "slot-name": "production",
                      "resource-group": "[parameters('azureResourceGroup')]",
                      "package": "."
                    }
                  },
                  {
                    "task": "azure/appservice-settings@v1",
                    "displayName": "Azure Web App Configuration",
                    "inputs": {
                      "app-name": "[parameters('azureAppName')]",
                      "slot-name": "production",
                      "resource-group": "[parameters('azureResourceGroup')]",
                      "general-settings-json": "{\"alwaysOn\": true, \"minTlsVersion\": \"1.2\"}"
                    }
                  },
                  {
                    "task": "aws-actions/login@v1",
                    "displayName": "Login to AWS",
                    "inputs": {
                      "aws-access-key-id": "[parameters('awsAccessKeyId')]",
                      "aws-secret-access-key": "[parameters('awsSecretAccessKey')]",
                      "aws-region": "[parameters('awsRegion')]"
                    }
                  },
                  {
                    "task": "aws-actions/security-audit@v1",
                    "displayName": "Scan for misconfigurations in AWS",
                    "inputs": {
                      "aws-access-key-id": "[parameters('awsAccessKeyId')]",
                      "aws-secret-access-key": "[parameters('awsSecretAccessKey')]",
                      "aws-region": "[parameters('awsRegion')]"
                    }
                  },
                  {
                    "task": "aws-actions/deploy@v1",
                    "displayName": "Deploy to AWS",
                    "inputs": {
                      "aws-access-key-id": "[parameters('awsAccessKeyId')]",
                      "aws-secret-access-key": "[parameters('awsSecretAccessKey')]",
                      "aws-region": "[parameters('awsRegion')]",
                      "package": "."
                    }
                  },
                  {
                    "task": "aws-actions/appservice-settings@v1",
                    "displayName": "AWS Web App Configuration",
                    "inputs": {
                      "aws-access-key-id": "[parameters('awsAccessKeyId')]",
                      "aws-secret-access-key": "[parameters('awsSecretAccessKey')]",
                      "aws-region": "[parameters('awsRegion')]",
                      "app-name": "[parameters('awsAppName')]",
                      "slot-name": "production",
                      "general-settings-json": "{\"alwaysOn\": true, \"minTlsVersion\": \"1.2\"}"
                    }
                  },
                  {
                    "task": "google-github-actions/login@v1",
                    "displayName": "Login to GCP",
                    "inputs": {
                      "credentials": "[parameters('gcpCredentials')]"
                    }
                  },
                  {
                    "task": "google-github-actions/security-audit@v1",
                    "displayName": "Scan for misconfigurations in GCP",
                    "inputs": {
                      "credentials": "[parameters('gcpCredentials')]"
                    }
                  },
                  {
                    "task": "google-github-actions/deploy@v1",
                    "displayName": "Deploy to GCP",
                    "inputs": {
                      "credentials": "[parameters('gcpCredentials')]",
                      "project-id": "[parameters('gcpProjectId')]",
                      "package": "."
                    }
                  },
                  {
                    "task": "google-github-actions/appservice-settings@v1",
                    "displayName": "GCP Web App Configuration",
                    "inputs": {
                      "credentials": "[parameters('gcpCredentials')]",
                      "project-id": "[parameters('gcpProjectId')]",
                      "app-name": "[parameters('gcpAppName')]",
                      "slot-name": "production",
                      "general-settings-json": "{\"alwaysOn\": true, \"minTlsVersion\": \"1.2\"}"
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    }

}